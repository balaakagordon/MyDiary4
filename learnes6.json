
let fName  = "Gordon";
let lName  = "Balaaka";

document.write(`${fName} ${lName}<br />`); #prints "Gordon Balaaka"

----------------------------------------------------------------------------------------

let num1  = 10;
let num1  = 5;

document.write(`10 * 5 = ${num1 * num2}<br />`); #prints "10 * 5 = 50"

----------------------------------------------------------------------------------------

function doMath(strings, ...values){
    if(strings[0] == 'Add'){
        document.write(`${values[0]} + ${values[1]} = ${values[0] + values[1]}<br />`);
    } else if(strings[0] == 'Sub') {
        document.write(`${values[0]} - ${values[1]} = ${values[0] - values[1]}<br />`);
    }
}

doMath `Add${10} ${20}`;     #prints "10 + 20 = 30"
doMath `Sub${10} ${20}`;     #prints "10 - 20 = -10"

----------------------------------------------------------------------------------------

for(let c of fName){
    document.write(`${c}<br />`);       #prints letters for fName out, each on a new line
}

document.write(fName.startsWith("Go") + "<br />");
document.write(fName.includes("rdo") + "<br />");

----------------------------------------------------------------------------------------

function getSum(num1 = 1, num2 = 1){
    document.write(`${num1} + ${num2} = ${num1 + num2}<br />`);
    document.write(`${arguments[0]} + ${arguments[1]}<br />`);
}

getSum(3)       #replaces first argument with 3 and returns "3 + 1 = 4"
getSum(3)       #replaces first argument with 3 only, and returns "3 + undefined"

----------------------------------------------------------------------------------------

function getSumMore(...vals){                                           #preceding dots make vals a list of values
    let sum = 0;
    for(let i = 0, len = vals.length; i < len; i++){
        sum += vals[i];
    }
    document.write(`The sum is ${sum}<br />`);    
}
getSumMore(1,2,3,4);         #returns "The sum is 10"

let vals = [1,2,3,4,5]
getSumMore(...vals);         #returns "The sum is 15"


----------------------------------------------------------------------------------------

let difference = (num1, num2) => num1 - num2;                                   #arrow function
document.write(`5 - 10 = ${difference(5,10)}<br />`);

let mult = (num1, num2) => {
    let product = num1 * num2;
    document.write(`${num1} * ${num2} = ${product}<br />`);
}

mult(5,50);          #returns "The 5 * 50 = 250"

----------------------------------------------------------------------------------------

let valArr = [1,2,3,4,5]

let sumVals = valArr.reduce((a,b) => a + b);
document.write(`Sum: ${sumVals}<br />`);

let evens = valArr.filter(v => v % 2 == 0);
document.write(`Evens: ${envens}<br />`);

let doubles = valArr.map(v => v * 2);
document.write(`Doubles: ${doubles}<br />`);




function createEntry(entrydata, entrytitle){
    return{
        entrydata,
        entrytitle,
        getInfo(){
            return `${this.entrytitle} is the title for ${this.entrydata}`
        },
        datecreated: {date_function}
    };
}

var entry1 = createEntry("the first entry", "title1")

document.write(`Evens: ${spot.getInfo()}<br />`);           #returns "title1 is the title for the first entry"

document.write(`Evens: ${spot.entrytitle} is the title for ${spot.entrydata}<br />`);           #returns "title1 is the title for the first entry"

document.write(`Evens: ${Object.getOwnPropertyNames(entry1).join(" ")}<br />`);     #returns "entrytitle entrydata getInfo datecreated"

let {entrydata, entrytitle} = entry1;
document.write(`Content: ${entrydata}<br />`);          #returns Content: "the first entry"

class DiaryEntry{
    constructor(entrydata){
        this._entrydata = entrydata;
    }

    get entrydata(){
        return this.entrydata;
    }

    set entrydata(entrydata){
        return this.entrydata = entrydata;
    }

    static makeEntry(entrydata){
        return new Entry(entrydata);
    }
}

class HappyEntry extends DiaryEntry{
    constructor(entrydata, entrytitle){
        super(entrydata);
        this._entrytitle = entrytitle;
    }

    get entrytitle(){
        return this.entrytitle;
    }

    set entrytitle(entrytitle){
        return this.entrytitle;
    }
}